{{#each api}}
{{#each operations}}
{{#or parameters requestBody}}
type {{capitalize name}}Request = {
  {{#each parameters}}
  {{#is in "path"}}
  {{name}}{{#unless required}}?{{/unless}}: {{{schemaType schema}}};
  {{/is}}
  {{/each}}
  {{#withParamQuery parameters}}
  {{normalizeQuery parameters}}
  {{/withParamQuery}}
  {{#withParamHeader parameters}}
  headers: {
    {{#each parameters}}
    {{#is in "header"}}
    {{name}}{{#unless required}}?{{/unless}}: {{{schemaType schema}}};
    {{/is}}
    {{/each}}
  };
  {{/withParamHeader}}
  {{#with requestBody}}
  body: {{{schemaType content.schema}}};
  {{/with}}
}
{{/or}}

{{#or response.content response.headers}}
type {{capitalize name}}Response = {
  {{#with response.content}}
  body: {{{schemaType schema}}};
  {{/with}}
  {{#with response.headers}}
  headers: {
    {{#each this}}
    {{camelcase @key}}: {{{schemaType schema}}};
    {{/each}}
  };
  {{/with}}
}
{{/or}}

{{/each}}
{{/each}}
{{#each components.schemas}}
{{#if properties}}
type {{capitalize @key}} = {
  {{#each properties}}
  {{@key}}: {{{schemaType this}}};
  {{/each}}
}

{{/if}}
{{/each}}