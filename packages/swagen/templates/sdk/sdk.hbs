import fetch from "@36node/fetch";
import { denormalize } from '@36node/query-normalizr';

export default class SDK {
  /**@type {string} **/
  base;
  /**@type {string} **/
  token;

  {{#if components.securitySchemes }}
  /**
   * Sdk auth
   *
   * @returns {string} auth header
   * */
  get auth() {
    if (this.token) {
      {{#if components.securitySchemes.bearerAuth }}
      return `Bearer ${this.token}`;
      {{/if}}
    }

    return "";
  }
  {{/if}}

  /**
   * Init store sdk
   *
   * @param {Object} opt
   * @param {string} opt.base  base url
   * @param {string} opt.token token for authorization
   */
  constructor(opt = {}) {
    this.base = opt.base || "";
    this.token = opt.token || "";
  }

  {{#each api}}
  /**
   * {{@key}}'s methods
   */
  {{@key}} = {
    {{#each operations}}
    /**
     * {{summary}}
     *
     * @param { {{~capitalize name}}Request} req {{name}} request
     * @returns {Promise< {{~capitalize name}}Response>} {{response.description}}
     */
    {{name}}: (req = {}) => {
      const {
        {{#each parameters}}
        {{#is in "path"}}
        {{name}},
        {{/is}}
        {{/each}}
        {{#withParamQuery parameters}}
        query,
        {{/withParamQuery}}
        headers,
        {{#with requestBody}}
        body,
        {{/with}}
      } = req;

      {{#each parameters}}
      {{#is in "path"}}
      {{#is required true}}
      if (!{{name}}) throw new Error("{{name}} is required for {{../name}}");
      {{/is}}
      {{/is}}
      {{/each}}
      {{#requireParamQuery parameters}}
      if (!query) throw new Error("query is required for {{../name}}");
      {{/requireParamQuery}}
      {{#requireParamHeader parameters}}
      if (!headers) throw new Error("headers is required for {{../name}}");
      {{/requireParamHeader}}
      {{#with requestBody}}
      if (!body) throw new Error("requetBody is required for {{../name}}");
      {{/with}}

      return fetch(`${this.base}{{toDollar path}}`, {
        method: "{{method}}",
        {{#withParamQuery parameters}}
        query: denormalize(query),
        {{/withParamQuery}}
        {{#with requestBody}}
        body,
        {{/with}}
        headers: { Authorization: this.auth, ...headers },
      });
    },
    {{/each}}
  };
  {{/each}}
}
