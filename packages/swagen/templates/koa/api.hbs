/// <reference path='./def.d.ts' />
import createError from "http-errors";

export default class API {
  /**
   * Bind service to router
   *
   * @param {Object} router the koa compatible router
   */
  bind(router) {
  {{#each operations}}
    const {{name}} = async ctx => {
      {{#each parameters}}
      {{#if required}}
      if (!ctx.params.{{name}}) throw createError(400, "{{name}} in {{in}} is required.");

      {{/if}}
      {{/each}}
      {{#or parameters requestBody}}
      const req = {
        {{#each parameters}}
        {{#is in "path"}}
        {{name}}: ctx.params.{{name}},
        {{/is}}
        {{/each}}
        {{#withParamQuery parameters}}
        query: {
          {{#each parameters}}
          {{#eq in "query"}}
          {{name}}: ctx.query.{{name}},
          {{/eq}}
          {{/each}}
        },
        {{/withParamQuery}}
        {{#withParamHeader parameters}}
        headers: {
          {{#each parameters}}
          {{#is in "header"}}
          {{name}}: ctx.headers["{{name}}"]),
          {{/is}}
          {{/each}}
        },
        {{/withParamHeader}}
        {{#withParamCookie parameters}}
        cookies: {
          {{#each parameters}}
          {{#is in "cookie"}}
          {{name}}: ctx.cookies.get({{name}}),
          {{/is}}
          {{/each}}
        },
        {{/withParamCookie}}
        {{#with requestBody}}
        body: ctx.request.body,
        {{/with}}
        context: ctx, // here we put koa context in request
      };

      {{/or}}
      {{#or response.content response.headers}}const res = {{/or}}await this.{{name}}({{#or parameters requestBody}}req{{/or}});

      {{#if response.content}}
      if (!res.body) throw createError(500, "should have body in response");

      {{/if}}
      {{#each response.headers}}
      if (!res.headers || res.headers.{{camelcase @key}} === undefined) throw createError(500, "should have header {{@key}} in response");

      {{/each}}
      {{#if response.content}}
      ctx.body = res.body;
      {{/if}}
      {{#each response.headers}}
      ctx.set("{{@key}}", res.headers.{{camelcase @key}});
      {{/each}}
      ctx.status = {{response.status}};
    };

  {{/each}}
  {{#each operations}}
    router.{{method}}("{{toRoute path}}", ...this.middlewares("{{name}}"), {{name}});
  {{/each}}
  }

  /**
   * implement following abstract methods in the inherited class
   */

  /**
   * Ability to inject some middlewares
   *
   * @param {string} operation name of operation
   * @returns {function[]} middlewares
   */
  middlewares(operation) {
    return [];
  }
{{#each operations}}

  /**
   * {{summary}}
   *
   * @abstract
   {{#or parameters requestBody}}
   * @param { {{~capitalize name}}Request} req {{name}} request
   {{/or}}
   {{#or response.content response.headers}}
   * @returns { {{~capitalize name}}Response} {{response.description}}
   {{/or}}
   */
  {{name}}({{#or parameters requestBody}}req{{/or}}) {
    throw new Error("not implemented");
  }
{{/each}}
}
